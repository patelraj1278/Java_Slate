===============CodeSignal1===============
/*
boolean[] solution(int[] numbers, int left, int right) {

    Predicate<Integer> pred1 = x -> x % 2 == 0;
    Predicate<Integer> pred2 = x -> x >= left && x <= right;

    List<Integer> inputList = Arrays.stream(numbers).boxed().collect(Collectors.toList());
    boolean[] result = compute(inputList,left,right,pred1,pred2);

    return result;
}

public static boolean[] compute(List<Integer> inputList, int left, int right,Predicate<Integer> pred1,Predicate<Integer> pred2){

    boolean[] bArr = new boolean[inputList.size()];
    for(int i=0 ; i < inputList.size()-1 ; i++){
        bArr[i] = pred1.and(pred2).test(inputList.get(i));
    }

    return bArr;
}

You are given an array of integers numbers and two integers left and right. You task is to calculate a boolean array result, where result[i] = true if there exists an integer x, such that numbers[i] = (i + 1) * x and left ≤ x ≤ right. Otherwise, result[i] should be set to false.

Example

For numbers = [8, 5, 6, 16, 5], left = 1, and right = 3, the output should be solution(numbers, left, right) = [false, false, true, false, true].

For numbers[0] = 8, we need to find a value of x such that 1 * x = 8, but the only value that would work is x = 8 which doesn't satisfy the boundaries 1 ≤ x ≤ 3, so result[0] = false.
For numbers[1] = 5, we need to find a value of x such that 2 * x = 5, but there is no integer value that would satisfy this equation, so result[1] = false.
For numbers[2] = 6, we can choose x = 2 because 3 * 2 = 6 and 1 ≤ 2 ≤ 3, so result[2] = true.
For numbers[3] = 16, there is no an integer 1 ≤ x ≤ 3, such that 4 * x = 16, so result[3] = false.
For numbers[4] = 5, we can choose x = 1 because 5 * 1 = 5 and 1 ≤ 1 ≤ 3, so result[4] = true.
Input/Output

[execution time limit] 3 seconds (java)

[input] array.integer numbers

An array of integers.

Guaranteed constraints:
1 ≤ numbers.length ≤ 100,
1 ≤ numbers[i] ≤ 106.

[input] integer left

An integer representing the lower bound for x.

Guaranteed constraints:
1 ≤ left ≤ 104.

[input] integer right

An integer representing the upper bound for x.

Guaranteed constraints:
1 ≤ left ≤ right ≤ 104.

[output] array.boolean

A boolean array result described above.
 */


============CodeSignal 2============


/*
You are given a string s. Consider the following algorithm applied to this string:

Take all the prefixes of the string, and choose the longest palindrome between them.
If this chosen prefix contains at least two characters, cut this prefix from s and go back to the first step with the updated string. Otherwise, end the algorithm with the current string s as a result.
Your task is to implement the above algorithm and return its result when applied to string s.

Note: you can click on the prefixes and palindrome words to see the definition of the terms if you're not familiar with them.

Example

For s = "aaacodedoc", the output should be solution(s) = "".

The initial string s = "aaacodedoc" contains only three prefixes which are also palindromes - "a", "aa", "aaa". The longest one between them is "aaa", so we cut if from s.
Now we have string "codedoc". It contains two prefixes which are also palindromes - "c" and "codedoc". The longest one between them is "codedoc", so we cut if from the current string and obtain the empty string.
Finally the algorithm ends on the empty string, so the answer is "".
For s = "codesignal", the output should be solution(s) = "codesignal".
The initial string s = "codesignal" contains the only prefix, which is also palindrome - "c". This prefix is the longest, but doesn't contain two characters, so the algorithm ends with string "codesignal" as a result.

For s = "", the output should be solution(s) = "".

Input/Output

[execution time limit] 3 seconds (java)

[input] string s

A string consisting of English lowercase letters.

Guaranteed constraints:
0 ≤ s.length ≤ 1000.

[output] string

The result of the described algorithm.
 */


============CodeSignal 3========================
#Problem : 1
Given an array of integers a, your task is to calculate the digits that occur the most number of times in the array. Return the array of these digits in ascending order.

Example

For a = [25, 2, 3, 57, 38, 41], the output should be solution(a) = [2, 3, 5].

Here are the number of times each digit appears in the array:

0 -> 0
1 -> 1
2 -> 2
3 -> 2
4 -> 1
5 -> 2
6 -> 0
7 -> 1
8 -> 1
The most number of times any number occurs in the array is 2, and the digits which appear 2 times are 2, 3 and 5. So the answer is [2, 3, 5].

Input/Output

[execution time limit] 3 seconds (java)

[input] array.integer a

An array of positive integers.

Guaranteed constraints:
1 ≤ a.length ≤ 103,
1 ≤ a[i] < 100.

[output] array.integer

The array of most frequently occurring digits, sorted in ascending order.

#Problem 2: 5:54 PM Start, 6:12 End
Given an integer n and an array a of length n, your task is to apply the following mutation to a:

Array a mutates into a new array b of length n.
For each i from 0 to n - 1, b[i] = a[i - 1] + a[i] + a[i + 1].
If some element in the sum a[i - 1] + a[i] + a[i + 1] does not exist, it should be set to 0. For example, b[0] should be equal to 0 + a[0] + a[1].
Example

For n = 5 and a = [4, 0, 1, -2, 3], the output should be solution(n, a) = [4, 5, -1, 2, 1].

b[0] = 0 + a[0] + a[1] = 0 + 4 + 0 = 4
b[1] = a[0] + a[1] + a[2] = 4 + 0 + 1 = 5
b[2] = a[1] + a[2] + a[3] = 0 + 1 + (-2) = -1
b[3] = a[2] + a[3] + a[4] = 1 + (-2) + 3 = 2
b[4] = a[3] + a[4] + 0 = (-2) + 3 + 0 = 1
So, the resulting array after the mutation will be [4, 5, -1, 2, 1].

Input/Output

[execution time limit] 3 seconds (java)

[input] integer n

An integer representing the length of the given array.

Guaranteed constraints:
1 ≤ n ≤ 103.

[input] array.integer a

An array of integers that needs to be mutated.

Guaranteed constraints:
a.length = n,
-103 ≤ a[i] ≤ 103.

[output] array.integer

The resulting array after the mutation.



You are given a string s. Your task is to count the number of ways of splitting s into three non-empty parts a, b and c (s = a + b + c) in such a way that a + b, b + c and c + a are all different strings.

NOTE: + refers to string concatenation.

Example

For s = "xzxzx", the output should be solution(s) = 5.

Consider all the ways to split s into three non-empty parts:

If a = "x", b = "z" and c = "xzx", then all a + b = "xz", b + c = "zxzx" and c + a = xzxx are different.
If a = "x", b = "zx" and c = "zx", then all a + b = "xzx", b + c = "zxzx" and c + a = zxx are different.
If a = "x", b = "zxz" and c = "x", then all a + b = "xzxz", b + c = "zxzx" and c + a = xx are different.
If a = "xz", b = "x" and c = "zx", then a + b = b + c = "xzx". Hence, this split is not counted.
If a = "xz", b = "xz" and c = "x", then all a + b = "xzxz", b + c = "xzx" and c + a = xxz are different.
If a = "xzx", b = "z" and c = "x", then all a + b = "xzxz", b + c = "zx" and c + a = xxzx are different.
Since there are five valid ways to split s, the answer is 5.



======


Given two strings s and t, both consisting of lowercase English letters and digits, your task is to calculate how many ways exactly one digit could be removed from one of the strings so that s is lexicographically smaller than t after the removal. Note that we are removing only a single instance of a single digit, rather than all instances (eg: removing 1 from the string a11b1c could result in a1b1c or a11bc, but not abc).

Also note that digits are considered lexicographically smaller than letters.

Example

For s = "ab12c" and t = "1zz456", the output should be solution(s, t) = 1.

Here are all the possible removals:

We can remove the first digit from s, obtaining "ab2c". "ab2c" > "1zz456", so we don't count this removal
We can remove the second digit from s, obtaining "ab1c". "ab1c" > "1zz456", so we don't count this removal
We can remove the first digit from t, obtaining "zz456". "ab12c" < "zz456", so we count this removal
We can remove the second digit from t, obtaining "1zz56". "ab12c" > "1zz56", so we don't count this removal
We can remove the third digit from t, obtaining "1zz46". "ab12c" > "1zz46", so we don't count this removal
We can remove the fourth digit from t, obtaining "1zz45". "ab12c" > "1zz45", so we don't count this removal
The only valid case where s < t after removing a digit is "ab12c" < "zz456". Therefore, the answer is 1.

For s = "ab12c" and t = "ab24z", the output should be solution(s, t) = 3.

There are 4 possible ways of removing the digit:

"ab1c" < "ab24z"
"ab2c" > "ab24z"
"ab12c" < "ab4z"
"ab12c" < "ab2z"
Three of these cases match the requirement that s < t, so the answer is 3.

Input/Output

[execution time limit] 3 seconds (java)

[input] string s

A string consisting of lowercase English letters and digits 0..9.

Guaranteed constraints:
1 ≤ s.length ≤ 103.

[input] string t

A string consisting of lowercase English letters and digits 0..9.

Guaranteed constraints:
1 ≤ t.length ≤ 103.

[output] integer

The number of ways to remove exactly one digit from one of the strings so that s is lexicographically smaller than t after the removal.


===


int solution(String s, String t) {

    int count = 0;
    for(int i=0 ; i< s.length() ; i++){
        if(Character.isDigit(s.charAt(i))){
            String sStr= "";
            sStr = s.replace(s.charAt(i), Character.MIN_VALUE);
            if(sStr.compareTo(t) > 50 || sStr.compareTo(t) < 0){
                count++;
            }
            System.out.println("Result ->"+sStr.compareTo(t) + "String 1-> "+sStr + "String 2->"+t);
        }
    }

    for(int i=0 ; i< t.length() ; i++){
        if(Character.isDigit(t.charAt(i))){
            String sStr= "";
            sStr = t.replace(t.charAt(i), Character.MIN_VALUE);
            if(s.compareTo(sStr) > 50 || s.compareTo(sStr) < 0){
                count++;
            }
            System.out.println("Result ->"+s.compareTo(sStr) + "String 1-> "+s + "String 2->"+sStr);
        }
    }

    System.out.println("Count ==> "+count);
    return count;
}



====

A text editor is a type of computer program that edits plain text. It consists of a string with a cursor. In the initial state the string is empty with the cursor at the beginning of the string.

Your task is to simulate the working process of a text editor which can handle four types of operations:

TYPE <text> - insert <text> after the current position of the cursor, where <text> consists of at most 20 characters. The cursor moves to the end of the inserted text.

MOVE_CURSOR <offset> - change the current cursor's position. The offset specifies the direction and the value change - if it's negative the cursor moves to the left, and if it's positive the cursor moves to the right. At all times, the cursor is either located at the beginning of the string (before the first character), between two characters, or at the end of the string (after the last character) - the cursor should always be within the text bounds. If the offset is larger than cursor can move, the cursor will move towards the direction as much, as it can. If the cursor does not change its position after the operation, the operation is considered unsuccessful.

SELECT <start_index> <end_index> - select the substring of the current text [text[start_index] ... text[end_index]] (inclusive indices, 0-based) of length end_index - start_index + 1. It is guaranteed that the indices are valid. The cursor changes its position to the end of the selected area. If the next immediately subsequent operation is not TYPE then the selected area is cleared.

If the next immediately subsequent operation is TYPE then the following updating process is expected during the TYPE operation:

Delete the selected text.
Insert the new text in the place of the deleted text.
The cursor position should move to the end of the typed text.
If this operation is anything other than TYPE, the selected area is cleared (See the examples for details).

UNDO - undo the last successful TYPE or MOVE_CURSOR operation (if there is nothing to undo, this operation does nothing). You cannot undo a SELECT operation. UNDO operation returns back to the text and cursor position to the state, they were before the operations is undone. Note that it's not possible to undo the same operation twice: if the operation has been undone, it's undone forever. However, it is possible to undo several operations one by one.

You are given operations, an array of strings where each is an operation of one of the four types above. Your task is to find the resulting text after performing the given operations.

NOTE: An operation is considered successful if the text or the cursor position is changed. For example, moving the cursor to the left when it stands before all characters is not considered a successful operation.

Example

For operations = ["TYPE Code", "TYPE Signal", "MOVE_CURSOR -3", "SELECT 5 8", "TYPE ou", "UNDO", "TYPE nio"], the output should be solution(operations) = "CodeSignaniol".

Initially the text is empty,
After the "TYPE Code" operation, the text is "Code|" (where the | symbol represents the cursor position),
After the "TYPE Signal" operation, the text is "CodeSignal|",
After the "MOVE_CURSOR -3", the cursor moves three symbols back, so the text is "CodeSig|nal",
After the "SELECT 5 8" operation, the selected text is "igna", the cursor is moved to the end of selected area "CodeSigna|l",
After the "TYPE ou" operation, since the previous operation was "SELECT", the selected text is deleted and replaced with the text "ou", the cursor stays after the typed text, so the text is "CodeSou|l",
After the "UNDO" operation, the last operation "TYPE" is undone and text and cursor is back as it was before the "TYPE" operation, so the text is "CodeSigna|l",
After the "TYPE nio" operation, the text is "CodeSignanio|l",
So the final string is "CodeSignaniol".
For operations = ["TYPE MyCat", "SELECT 2 3", "MOVE_CURSOR -1", "TYPE he", "SELECT 0 1", "TYPE His"], the output should be solution(operations) = "HisCheat".

Initially the text is empty,
After the "TYPE MyCat" operation, the text is "MyCat|",
After the "SELECT 2 3" operation, the selected text is "Ca", the cursor is moved after the selected area "MyCa|t",
After the "MOVE_CURSOR -1", the cursor moves one symbol back, so the text is "MyC|at". Also, the selected area is cleared, as this operation is not "TYPE". No area is selected,
After the "TYPE he" operation, the text is "MyChe|at", the typed text is inserted where the cursor stands.
After the "SELECT 0 1" operation, the selected text is "My",
After the "TYPE His" operation, since the previous operation was "SELECT", the selected text is deleted and replaced with the text "His", the cursor moves to the end of the typed area, so the text is "His|Cheat",
So the final string is "HisCheat".
For operations = ["TYPE Nothing", "TYPE Is", "TYPE Permanent", "UNDO", "UNDO", "UNDO", "UNDO"], the output should be solution(operations) = "".

Initially the text is empty,
After the "TYPE Nothing", "TYPE is", and "TYPE Permanent" operations the text is "NothingIsPermanent",
Then, after three consequent "UNDO" operations, the text becomes "", the last "UNDO" operation is ignored since there are no more operations to undo.
Input/Output

[execution time limit] 3 seconds (java)

[input] array.string operations

A sequence of operations. It's guaranteed that all the operations satisfy the format described above.

Guaranteed constraints:
1 ≤ operations.length ≤ 103.

[output] string

The resulting text after performing the given sequence of operations.


===Code Signal 5
You are given an array of strings arr. Your task is to construct a string from the words in arr, starting with the 0th character from each word (in the order they appear in arr), followed by the 1st character, then the 2nd character, etc. If one of the words doesn't have an ith character, skip that word.

Return the resulting string.

Example

For arr = ["Daisy", "Rose", "Hyacinth", "Poppy"], the output should be solution(arr) = "DRHPaoyoisapsecpyiynth".

First, we append all 0th characters and obtain string "DRHP";
Then we append all 1st characters and obtain string "DRHPaoyo";
Then we append all 2nd characters and obtain string "DRHPaoyoisap";
Then we append all 3rd characters and obtain string "DRHPaoyoisapaecp";
Then we append all 4th characters and obtain string "DRHPaoyoisapaecpyiy";
Finally, only letters in the arr[2] are left, so we append the rest characters and get "DRHPaoyoisapaecpyiynth";
example

For arr = ["E", "M", "I", "L", "Y"], the output should be solution(arr) = "EMILY".

Since each of these strings have only one character, the answer will be concatenation of each string in order, so the answer is EMILY.

Input/Output

[execution time limit] 3 seconds (java)

[input] array.string arr

An array of strings containing alphanumeric characters.

Guaranteed constraints:
1 ≤ arr.length ≤ 100,
1 ≤ arr[i].length ≤ 100.

[output] string

Return the resulting string.



=====2
Given an integer n and an array a of length n, your task is to apply the following mutation to a:

Array a mutates into a new array b of length n.
For each i from 0 to n - 1, b[i] = a[i - 1] + a[i] + a[i + 1].
If some element in the sum a[i - 1] + a[i] + a[i + 1] does not exist, it should be set to 0. For example, b[0] should be equal to 0 + a[0] + a[1].
Example

For n = 5 and a = [4, 0, 1, -2, 3], the output should be solution(n, a) = [4, 5, -1, 2, 1].

b[0] = 0 + a[0] + a[1] = 0 + 4 + 0 = 4
b[1] = a[0] + a[1] + a[2] = 4 + 0 + 1 = 5
b[2] = a[1] + a[2] + a[3] = 0 + 1 + (-2) = -1
b[3] = a[2] + a[3] + a[4] = 1 + (-2) + 3 = 2
b[4] = a[3] + a[4] + 0 = (-2) + 3 + 0 = 1
So, the resulting array after the mutation will be [4, 5, -1, 2, 1].

Input/Output

[execution time limit] 3 seconds (java)

[input] integer n

An integer representing the length of the given array.

Guaranteed constraints:
1 ≤ n ≤ 103.

[input] array.integer a

An array of integers that needs to be mutated.

Guaranteed constraints:
a.length = n,
-103 ≤ a[i] ≤ 103.

[output] array.integer

The resulting array after the mutation.

int[] solution(int n, int[] a) {
    int[] b = new int[n];
    for(int i=0 ; i< a.length ; i++){
        if(a.length == 1) {
         b[i] = a[0];
         break;
        }
        if(i-1 < 0){
            b[i] = a[i] + a[i+1];
        }
        if(i+1 >= a.length){
            b[i] = a[i-1]+a[i];
        }

        if(i-1 >= 0 && i+1 < a.length){
            b[i] = a[i-1]+a[i]+a[i+1];
        }

    }

    return b;
}


===

You are given a string s. Consider the following algorithm applied to this string:

Take all the prefixes of the string, and choose the longest palindrome between them.
If this chosen prefix contains at least two characters, cut this prefix from s and go back to the first step with the updated string. Otherwise, end the algorithm with the current string s as a result.
Your task is to implement the above algorithm and return its result when applied to string s.

Note: you can click on the prefixes and palindrome words to see the definition of the terms if you're not familiar with them.

Example

For s = "aaacodedoc", the output should be solution(s) = "".

The initial string s = "aaacodedoc" contains only three prefixes which are also palindromes - "a", "aa", "aaa". The longest one between them is "aaa", so we cut if from s.
Now we have string "codedoc". It contains two prefixes which are also palindromes - "c" and "codedoc". The longest one between them is "codedoc", so we cut if from the current string and obtain the empty string.
Finally the algorithm ends on the empty string, so the answer is "".
For s = "codesignal", the output should be solution(s) = "codesignal".
The initial string s = "codesignal" contains the only prefix, which is also palindrome - "c". This prefix is the longest, but doesn't contain two characters, so the algorithm ends with string "codesignal" as a result.

For s = "", the output should be solution(s) = "".

Input/Output

[execution time limit] 3 seconds (java)

[input] string s

A string consisting of English lowercase letters.

Guaranteed constraints:
0 ≤ s.length ≤ 1000.

[output] string

The result of the described algorithm.
String solution(String s) {
    String result = "";
    if(s.length() <= 0 ){
        return result;
    }
    for(int i=0;i < s.length();i++){
        String str = s.substring(0,i);
        if(isPalin(str) && str.length() > 2){
            System.out.println(str);
            solution(s.substring(i));
        }
    }

    return "";
}

public boolean isPalin(String s){
    StringBuffer sb = new StringBuffer();
    sb.append(s);
    if(sb.reverse().toString().equals(s)){
        return true;
    }else{
        return false;
    }

}


===

Given an array of integers arr, a positive integer k, and an integer s, your task is to find the number of non-empty contiguous subarrays with length not greater than k and with a sum equal to s.

Example

For arr = [1, 0], k = 2, and s = 1, the output should be solution(arr, k, s) = 2.

There is 1 subarray among the contiguous subarrays of length 1 with sum equal to s = 1, and it is [1],
There is 1 subarray among the contiguous subarrays of length 2 with sum equal to s = 1, and it is [1, 0].
So the answer is 2.

For arr = [1, 2, 4, -1, 6, 1], k = 3, and s = 6, the output should be solution(arr, k, s) = 3.

There is 1 subarray among the contiguous subarrays of length 1 with sum equal to s = 6, and it is [6],
There is 1 subarray among the contiguous subarrays of length 2 with sum equal to s = 6, and it is [2, 4],
There is 1 subarray among the contiguous subarrays of length 3 with sum equal to s = 6, and it is [-1, 6, 1].
Note that the subarray [1, 2, 4, -1] would also sum to s, but its length is greater than k, so it's not applicable.

So the answer is 3.

Input:
arr: [1, 0]
k: 2
s: 1
Expected Output:
2


Input:
arr: [1, 2, 4, -1, 6, 1]
k: 3
s: 6
Expected Output:
3


Input:
arr: [-3, 5, 2, 6, 10, -7, 2, -3]
k: 1
s: -3
Expected Output:
2

Input:
arr: [-468, 1254, 3, -1734, 1737, -1581, 442, 3, 1136, -1143, 1146, -1260, -321, 208, -351, 122, 196, 1406, -1136, 618]
k: 20
s: 3
Expected Output:
11

Input:
arr: [854, -1307, 1212, -584, -1061, 1522, -1034, 820, -765, 1232, -412, -875, 229, 581, 184, -64, -1294, 825, -170, -541, -117, 820, -765, 1177, 244, -1471, 53, 762, 120, -984]
k: 20
s: 55
Expected Output:
8


Input:
arr: [7927, -1587, -666, 4669, -10343, -3044, 4108, -5349, -8535, -1823, -9795, 2635, 66, -2502, 3420, 20819, -2828, -6634, 9462, -6769, -6980, 680, -7849, 9544, -7532, 18906, 0, 3768, -3768, 8609, -8609, 7497, -9110, -8015, 9628, 0, -7995, -6879, -2535, 17409]
k: 35
s: 0
Expected Output:
53

