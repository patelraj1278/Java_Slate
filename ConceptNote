
======================================LAMNDA======================================================================
##https://www.developer.com/microsoft/start-using-java-lambda-expressions/
Lambda Expressions Syntax
The basic syntax of a lambda is either:

(parameters) ->expression                or         (parameters) ->{ statements; }

The following are examples of Java lambda expressions:

1.  () -> 5                           		// takes no value and returns 5
2.  x -> 2 * x            					// takes a number and returns the result of doubling it
3.  (x, y) -> x – y                     		// takes two numbers and returns their difference
4.  (int x, int y) -> x + y      				// takes two integers and returns their sum
5.  (String s) -> System.out.print(s) 		// takes a string and prints it to console without returning anything

##https://mkyong.com/tutorials/java-8-tutorials/

=====================================JAVA 8 REFERENCES=======================================================================
#https://mkyong.com/java8/java-8-method-references-double-colon-operator/

There are four kinds of method references:

Reference to a static method ClassName::staticMethodName
Reference to an instance method of a particular object Object::instanceMethodName
Reference to an instance method of an arbitrary object of a particular type ContainingType::methodName–
Reference to a constructor ClassName::new

In Java 8, the double colon (::) operator is called method references. Refer to the following examples:

Anonymous class to print a list.


List<String> list = Arrays.asList("node", "java", "python", "ruby");
list.forEach(new Consumer<String>() {       // anonymous class
    @Override
    public void accept(String str) {
        System.out.println(str);
    }
});
Anonymous class -> Lambda expressions.


List<String> list = Arrays.asList("node", "java", "python", "ruby");
list.forEach(str -> System.out.println(str)); // lambda
Lambda expressions -> Method references.


List<String> list = Arrays.asList("node", "java", "python", "ruby");
list.forEach(System.out::println);          // method references
Anonymous Class -> Lambda expression -> Method Reference

=====================================Functional Interfaces=======================================================================
Java 8 Function examples
Java 8 BiFunction examples
Java 8 BinaryOperator examples
Java 8 UnaryOperator Examples
Java 8 Predicate examples
Java 8 BiPredicate examples
Java 8 Consumer examples
Java 8 BiConsumer examples
Java 8 Supplier Examples

Let us see the six basic function interfaces.

Interface	        Signature	            Examples
UnaryOperator<T>	T apply(T t)	        String::toLowerCase, Math::tan
BinaryOperator<T>	T apply(T t1, T t2)	    BigInteger::add, Math::pow
Function<T, R>	    R apply(T t)	        Arrays::asList, Integer::toBinaryString
Predicate<T, U>	    boolean test(T t, U u)	String::isEmpty, Character::isDigit
Supplier<T>	        T get()	                LocalDate::now, Instant::now, TreeMap::new
Consumer<T>	        void accept(T t)	    System.out::println, Error::printStackTrace

#Function Interface

---Function.java

@FunctionalInterface
public interface Function<T, R> {

      R apply(T t);

}
T – Type of the input to the function.
R – Type of the result of the function.



In Java 8, BiFunction is a functional interface; it takes two arguments and returns an object.

---BiFunction.java

@FunctionalInterface
public interface BiFunction<T, U, R> {

      R apply(T t, U u);

}
T – Type of the first argument to the function.
U – Type of the second argument to the function.
R – Type of the result of the function.


The UnaryOperator takes one argument, and returns a result of the same type of its arguments.

---UnaryOperator.java

@FunctionalInterface
public interface UnaryOperator<T> extends Function<T, T> {
}
The Function takes one argument of any type and returns a result of any type.

Function.java

@FunctionalInterface
public interface Function<T, R> {
    R apply(T t);
}

In Java 8, BinaryOperator is a functional interface and it extends BiFunction.

The BinaryOperator takes two arguments of the same type and returns a result of the same type of its arguments.

---BinaryOperator.java

@FunctionalInterface
public interface BinaryOperator<T> extends BiFunction<T,T,T> {
}
The BiFunction takes two arguments of any type, and returns a result of any type.

BiFunction.java

@FunctionalInterface
public interface BiFunction<T, U, R> {
      R apply(T t, U u);
}


In Java 8, Predicate is a functional interface, which accepts an argument and returns a boolean. Usually, it used to apply in a filter for a collection of objects.
-----Predicate.java

@FunctionalInterface
public interface Predicate<T> {
  boolean test(T t);
}


In Java 8, BiPredicate is a functional interface, which accepts two arguments and returns a boolean, basically this BiPredicate is same with the Predicate, instead, it takes 2 arguments for the test.

-----BiPredicate.java
@FunctionalInterface
public interface BiPredicate<T, U> {
    boolean test(T t, U u);
}

In Java 8, Consumer is a functional interface; it takes an argument and returns nothing.

----Consumer.java
@FunctionalInterface
public interface Consumer<T> {
  void accept(T t);
}

In Java 8, BiConsumer is a functional interface; it takes two arguments and returns nothing.

---BiConsumer.java
@FunctionalInterface
public interface BiConsumer<T, U> {
  void accept(T t, U u);
}


In Java 8, Supplier is a functional interface; it takes no arguments and returns a result.

----Supplier.java

@FunctionalInterface
public interface Supplier<T> {
    T get();
}

========================================QUICK GUIDE====================================================================
#Lambda Expression
    Method Reference
    Constructor Reference
    Static Reference

#Java 8 Functional Interface
    #Java 8 Function
        LongToIntFunction
        DoubleToIntFunction
        IntToLongFunction
        DoubleToLongFunction
        IntToDoubleFunction
        LongToDoubleFunction
        Function<T,R>
        IntFunction<R>
        LongFunction<R>
        DoubleFunction<R>
        ToIntFunction<T>
        ToLongFunction<T>
        ToDoubleFunction<T>
    #Java 8 BiFunction
        BiFunction<T,U,R>
        ToIntBiFunction<T,U>
        ToLongBiFunction<T,U>
        ToDoubleBiFunction<T,U>
    #Java 8 BinaryOperator
        IntBinaryOperator
        LongBinaryOperator
        DoubleBinaryOperator
        BinaryOperator<T>
    #Java 8 UnaryOperator
        IntUnaryOperator
        LongUnaryOperator
        DoubleUnaryOperator
        UnaryOperator<T>
    #Java 8 Predicate
        IntPredicate
        LongPredicate
        DoublePredicate
        Predicate<T>
    #Java 8 BiPredicate
        BiPredicate<T,U>
    #Java 8 Consumer
        IntConsumer LongConsumer
        DoubleConsumer Consumer<T>
        ObjIntConsumer<T>
        ObjLongConsumer<T>
        ObjDoubleConsumer<T>
    #Java 8 BiConsumer
        BiConsumer<T,U>
    #Java 8 Supplier
        IntSupplier
        LongSupplier
        DoubleSupplier
        BooleanSupplier
        Supplier<T>


#Java 8 Streams
    #Types of Stream
        Sequential
        Parallel
    #Stream<T>, IntStream, LongStream, DoubleStream
        1) Stream has a source (creating stream) -
            -static methods in Stream<T>
                static <T> Stream<T> concat(Stream<T> s1, Stream<T> s2) static <T> Stream<T> empty()
                static <T> Stream<T> generate(Supplier<T> supplier)
                static <T> Stream<T> of(T element)
                static <T> Stream<T> of(T... elements)
                static <T> Stream<T> ofNullable(T element)
                static <T> Stream<T> iterate(T seed, UnaryOperator<T> function)
                static <T> Stream<T> iterate(T seed, Predicate<T> hasNext, UnaryOperator<T> f)
            -Creating streams from arrays and collections Arrays class static method
                public static <T> Stream<T> stream(T[] array)
            -default methods in Collection<E>
                default Stream<E> stream()
                default Stream<E> parallelStream()
            -Creating Stream (in API)
                -method java.io.BufferedReader
                    Stream<String> lines()
                -methods in java.nio.file.Files
                    static Stream<String> lines(Path path)
                    static Stream<String> lines(Path path, Charset cs)
                    static Stream<Path> list(Path dir)
                    static Stream<Path> find(Path start, int maxDepth, BiPredicate<Path, BasicFileAttributes> matcher, FileVisitOption... options)
                    static Stream<Path> walk(Path start, int maxDepth, FileVisitOption... options)
                    static Stream<Path> walk(Path start, ileVisitOption... options)
                -methods in CharSequence
                    IntStream codePoints()
                    IntStream chars()
                -method in java.util.regex.Pattern
                    Stream<String> splitAsStream(CharSequence input)
                -method in java.util.regex.Matcher (from Java 9 onwards)
                    Stream<MatchResult> results()
        -(2,3,4)Stream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines.
        2) Stream as a pipeline of operations
        3) Stream intermediate operations
            Stream<T> distinct()
            Stream<T> filter(Predicate<T> test)
            Stream<T> skip(long n)
            Stream<T> limit(long n)
            Stream<T> dropWhile(Predicate<T> test) (Java 9 onwards)
            Stream<T> takeWhile(Predicate<T> test) (Java 9 onwards)
            <U> Stream<U> map(Function<T,U> mapper)
            IntStream mapToInt(ToIntFunction<T> mapper)
            LongStream mapToLong(ToLongFunction<T> mapper)
            DoubleStream mapToDouble(ToDoubleFunction<T> f)
            Stream<T> peek(Consumer<T> action)
            Stream<T> sorted(Comparator<T> comparator)
            <U> Stream<U> flatMap(Function<T,Stream<U> f)
            IntStream flatMapToInt(Function<T, IntStream> f)
            LongStream flatMapToLong(Function<T, LongStream> f)
            DoubleStream flatMapToDouble(Function<T, DoubleStream> f)
        4) Stream terminal operations
            boolean allMatch(Predicate<T> test)
            boolean anyMatch(Predicate<T> test)
            boolean noneMatch(Predicate<T> test
            long count()
            Optional<T> max(Comparator<T> comparator)
            Optional<T> min(Comparator<T> comparator)
            int sum() for primitive variants
            double average() for primitive variants
            Optional<T> findFirst()
            Optional<T> findAny()
            void forEach(Consumer<T> action)
            void forEachOrdered(Consumer<T> action)
            Object[] toArray()
            <A> A[] toArray(IntFunction<A[]> arrayCreator)
            #reduce() (Advanced usage of Stream)
                T reduce(T identity, BinaryOperator<T> accumulator)
                Optional<T> reduce(BinaryOperator<T> accumulator)
                <U> U reduce(U identity, BiFunction<U,T,U> accumulator, BinaryOperator<U> combiner)
            #collect() (Advanced usage of Stream)
                <R> R collect(Supplier<R> supplier, BiConsumer<R,T> accumulator, BiConsumer<R,R> combiner)
                <R,A> R collect(Collector<T,A,R> collector)
                    #The Collector<T,A,R>
                        Supplier<A> supplier()
                        BiConsumer<A,T> accumulator()
                        BinaryOperator<A> combiner()
                        Function<A,R> finisher()
                    # Creating Collector using Collectors
                        averagingInt()
                        averagingLong()
                        averagingDouble()
                        summingInt()
                        summingLong()
                        summingDouble()
                        summarizingInt()
                        summarizingLong()
                        summarizingDouble()
                        counting()
                        maxBy()
                        minBy()
                        reducing()
                        collectingAndThen()
                        mapping()
                        groupingBy()
                        partitioningBy()
                        toCollection()
                        toSet()
                        toList()
                        toMap()

#Java 8 Comparator<T>
    -Comparator factory methods
        comparing and variants of primitives
        naturalOrder and reverseOrder
        null friendly Comparator
    -Combining Comparators
        thenComparing and reverse

#Java 8 Optional<T>
    Some convenient methods
        Optional.ofNullable()
        Optional.empty()
        Optional.of()
        void ifPresent(Consumer<T> action)
        boolean isPresent()
        T orElse(T other)
        T orElseGet(Supplier<T> supplier)
        Optional<T> filter(Predicate<T> test)
        Optional<U> map(Function<T,U> mapper)
        Optional<U> flatMap(Function<T, Optional<U>> mapper)
    Where does Java Optional fits?
        Method Parameter
        Method Return Type
        Constructor Parameter
        Variable Declaration
        Class Level

#Java 8 Spliterator and its primitive variants
    Spliterator<E>
    IntSpliterator
    LongSpliterator
    DoubleSpliterator

#Java 8 Statistics, StringJoiner
    IntSummaryStatistics
    LongSummaryStatistics
    DoubleSummaryStatistics
    StringJoiner

#Default methods in Collection<E> interface
    public default void forEach(Consumer<E> action)
    public default Spliterator<E> spliterator()
    public default void removeIf(Predicate<E> test)
    public default Stream<E> stream()
    public default Stream<E> parallelStream()

#Java 8 Date & Time (java.time package)
    Clock and Instant
    Duration, Period
    LocalDate, LocalTime, LocalDateTime
    ZonedDateTime, OffsetTime, OffsetDateTime
    MonthDay, YearMonth, Year

#Java 8  Changes in interfaces
    static methods in interfaces
    default methods in interfaces
    functional interfaces

==========================================================================================
#Java 8 Quick Snap Shot
==========================================================================================
    List
        list.stream().collect(Collectors.toMap(Hosting::getId,Hosting::getName)); //Here To Map Need Key & Values
        list.stream().collect(Collectors.toMap(Hosting::getName, Hosting::getWebsites, (existing,replacement) -> existing, TreeMap::new));
        list.stream().sorted(Comparator.comparing(java8.collectorsJava8.Hosting::getWebsites).reversed())
                        .collect(Collectors.toMap(Hosting::getName,Hosting::getWebsites,(oldValue,newValue) -> oldValue,LinkedHashMap
                        ::new));
        listDevs.sort((Developer o1, Developer o2)->o1.getNo().compareTo(o2.getNo()));
        Comparator<Developer> cd = (o1, o2) -> o1.getNo().compareTo(o2.getNo()); /listDevs.stream().sorted(cd.reversed()).forEach(developer -> System.out.println(developer));
        List<Integer> result = new ArrayList(map.keySet());
        List<String> result2 = new ArrayList(map.values());
        List<Integer> result1 = map1.keySet().stream().collect(Collectors.toList());
        List<String> result3 = map1.values().stream().collect(Collectors.toList());
        List<Integer> result4 = map1.keySet().stream().filter(x -> x != 10).collect(Collectors.toList());
        list.stream().filter(v -> v!=null)
                              .forEach(v -> {
                                  System.out.println(v.toLowerCase());
                              });
        List<String> collect1 = numbers1.stream()
                        .map(x -> new Scanner(x).findAll("\\D+")
                                .map(m -> m.group())
                                .collect(Collectors.toList())) // List<List<String>>
                        .flatMap(List::stream)					// List<String>
                        .collect(Collectors.toList());
        List<Integer> integers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        int sum = integers.stream().mapToInt(Integer::intValue).sum();

    Map

      strMap.forEach( (k,v) -> {
                        if (k != null && v!= null) {
                            System.out.println("Key : " + k + ", Value : " + v);
                        }
      map.entrySet().stream()
                      //sort a Map by key and stored in resultSortedKey
                      .sorted(Map.Entry.<Integer, String>comparingByKey().reversed())
                      .peek(e -> resultSortedKey.add(e.getKey()))
                      .map(x -> x.getValue())
                      // filter banana and return it to resultValues
                      .filter(x -> !"banana".equalsIgnoreCase(x))
                      .collect(Collectors.toList());

      unsortMap.entrySet().stream().sorted(Map.Entry.comparingByKey()).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,(oldValue, newValue) -> oldValue, LinkedHashMap::new));
      unsortMap.entrySet().stream()
                      .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
                      .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,(oldValue, newValue) -> oldValue, LinkedHashMap::new));
      unsortMap.entrySet().stream()
                      .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
                      .forEachOrdered(x -> result2.put(x.getKey(), x.getValue()));
      map.entrySet().stream()
                      .filter(map -> "aws.amazon.com".equals(map.getValue()))
                      .map(map -> map.getValue())
                      .collect(Collectors.joining());
      Map<Integer, String> collect = map.entrySet().stream()
                      .filter(map -> map.getKey() == 2)
                      .collect(Collectors.toMap(p -> p.getKey(), p -> p.getValue()));
      Map<Integer, String> collect2 = HOSTING.entrySet().stream()
                      .filter(map -> map.getKey() <= 3)
                      .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));

      Map<Integer, String> filteredMap = filterByValue(HOSTING, x -> x.contains("linode"));
                  System.out.println(filteredMap);
       // Generic Map filterbyvalue, with predicate
           public static <K, V> Map<K, V> filterByValue(Map<K, V> map, Predicate<V> predicate) {
               return map.entrySet()
                       .stream()
                       .filter(x -> predicate.test(x.getValue()))
                       .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      Map<String, Long> result =items.stream().collect(Collectors.groupingBy(x -> x.toUpperCase(),Collectors.counting()));
      Map<String, Integer> sum = items.stream().collect(Collectors.groupingBy(Item::getName, Collectors.summingInt(Item::getQty)));

      ForEach
        list.stream().filter(Objects::nonNull).forEach(System.out::println);
        list.stream().filter(v -> v!=null).forEach(v -> {System.out.println(v.toLowerCase());});


      StringJoiner
        StringJoiner sj = new StringJoiner(","); //aaa,bbb,ccc
        StringJoiner sj1 = new StringJoiner("/", "prefix-", "-suffix"); //prefix-2016/02/26-suffix
        String result1 = String.join(", ", list); //java, python, nodejs, ruby
        String result = list.stream().map(x -> x).collect(Collectors.joining(" | ")); ////java | python | nodejs | ruby
        String result1 = list1.stream().map(x -> x.getName()).collect(Collectors.joining(", ", "{", "}"));

      Optional
        Optional<String> gender = Optional.of("MALE"); / gender.get()
        Optional.empty()
        Optional.ofNullable(answer1)
        Optional<String> nonEmptyGender = Optional.of("male"); /nonEmptyGender.map(String::toUpperCase)
        Optional<Optional<String>> nonEmptyOtionalGender = Optional.of(Optional.of("male")); / nonEmptyOtionalGender.flatMap(gender -> gender.map(String::toUpperCase))

      Concat
        int[] result2 = IntStream.concat(Arrays.stream(int1), Arrays.stream(int2)).toArray();
        int[] result3 = IntStream.concat(Arrays.stream(int1),IntStream.concat(Arrays.stream(int2), Arrays.stream(int3))).toArray();

      Reduce
        BigDecimal sum =invoices.stream().map(x -> x.getQty().multiply(x.getPrice())).reduce(BigDecimal.ZERO,(a,b) -> a.add(b));
        BigDecimal sumOfLineItems = orders.stream().flatMap(order -> order.getLineItems().stream()).map(line -> line.getTotal()).reduce(BigDecimal.ZERO, BigDecimal::add);          //  reduce to sum all

      References
        Static Method Reference - list.forEach(SimplePrinter::print);
        Instance Method Reference - list.sort(provider::compareByAge);
        Constructor Reference - List<Invoice> invoices = fakeInvoice(list, Invoice::new);

      Stream Converter
        String[] result = Arrays.stream(lines.split("\\s+")).map(String::toUpperCase).toArray(String[]::new); //Stream -> String[]
        Integer[] result = Arrays.stream(num).map(x -> x * 2).boxed().toArray(Integer[]::new);
        int[] stream1 = IntStream.rangeClosed(1, 5).toArray();
        int i = Arrays.stream(num).findFirst().getAsInt()
        Stream<Integer> stream2 = Stream.of(1, 2, 3, 4, 5);
        List<String> result1 = Stream.of(strArray1).flatMap(Stream::of).map(x -> x.toUpperCase()).collect(Collectors.toList());

      Stream common
         Optional<String> result = list.stream().filter(x -> !x.equalsIgnoreCase("node")).findFirst();
         Optional<Integer> any = list.stream().filter(x -> x > 1).findAny();
         Stream.iterate(0, n -> n + 1).limit(10).forEach(x -> System.out.println(x));
         long count1 = l1.stream().filter(x->!x.isEmpty()).peek(System.out::println).count();
         Optional<String> collect1 = lines.stream().filter(x -> x.equalsIgnoreCase("mkyong")).findAny();
         List<String> filteredlines =  lines.stream().filter(x -> x.equalsIgnoreCase("mkyong")).collect(Collectors.toList());
         String collect2 = lines.stream().filter(x -> x.equalsIgnoreCase("abc")).findAny().orElse("Raj");
         String collect3 = lines.stream().filter(x -> x.equalsIgnoreCase("abc1")).findAny().orElseGet(() -> "Raj2");
         Person p = newList.stream().filter(x -> x.getName().equalsIgnoreCase("Heman")).findAny().orElse(new Person("Prisha",3));
          List<String> collect = persons.stream().map(Person::getName).collect(Collectors.toList());

      Consumer
          List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);
          Consumer<Integer> consumer = (Integer x) -> System.out.println(x);
          forEach(list,consumer);
          static <T> void forEach(List<T> list, Consumer<T> consumer) {
                  for (T t : list) {
                      consumer.accept(t);
                  }
              }
      BiConsumer
          addTwo(1, 2, (x, y) -> System.out.println(x + y));
          static <T> void addTwo(T a1, T a2, BiConsumer<T,T> c){
                  c.accept(a1,a2);
              }

      Function
         Map<String, Integer> map = convertListToMap(list, x -> x.length());
         public <T,R> Map<T,R> convertListToMap(List<T> list,Function<T,R> func){
               Map<T, R> result = new HashMap<>();
               for(T t: list){
                    result.put(t, func.apply(t));
                }
                return result;
         }
        List<String> returnList1 = convertListToList(list, x-> x.toLowerCase());
        public <T,R> List<R> convertListToList(List<T> list, Function<T,R> func){
                List<R> result = new ArrayList<>();
                for(T t : list){
                    result.add(func.apply(t));
                }
                return result;
            }


      BiFunction
        BiFunction<String,String,String> biFunc1 = (i1,i2) -> i1.replace(i1,i2);
        Function<String,String> func1 =  d -> String.valueOf(d);
        System.out.println(genericMethod("Raj","Patel",biFunc1,func1));
        public static <A1, A2, R1, R2> R2 genericMethod(A1 a1, A2 a2,
                                                      BiFunction<A1, A2, R1> func,
                                                      Function<R1, R2> func2) {
            return func.andThen(func2).apply(a1, a2);
        }

        BiFunction<Integer, Integer, Integer> func = (x1, x2) -> x1 + x2;
        Integer result = func.apply(2, 3);



      Predicate
        Predicate<Integer> noGreaterThanFive = x -> x < 5;
        Predicate<Integer> greateThanTwo = x -> x > 2;
        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        List<Integer> collect1 =list.stream().filter(noGreaterThanFive).filter(greateThanTwo).collect(Collectors.toList());
        class StringProcessor{
            static List<String> filter(List<String> list, Predicate<String> predicate){
                return list.stream().filter(predicate::test).collect(Collectors.toList());
            }
        }

      BiPredicate
        BiPredicate<String, Integer> filter = (x, y) -> {
                    return x.length() == y;
                };
        boolean result = filter.test("mkyong",6);

        List<Domain> result2 = filterBadDomain(domains, (domain, score) -> score == 0);
        List<Domain> result3 = filterBadDomain(domains, (domain, score) -> domain.startsWith("i") && score > 5);
        static <T extends Domain> List<T> filterBadDomain(List<T> list, BiPredicate<String, Integer> biPredicate){
                return list.stream()
                        .filter(x -> biPredicate.test(x.getName(), x.getScore()))
                        .collect(Collectors.toList());
            }

        BinaryOperator -  the BiFunction<Integer, Integer, Integer> which accepts and returns the same type, can be replaced with BinaryOperator<Integer>.
            Comparator<Developer> comparing = Comparator.comparing(Developer::getSalary);
            BinaryOperator<Developer> bo = BinaryOperator.maxBy(comparing);
            Developer result = find(list, bo);
            public static Developer find(List<Developer> list, BinaryOperator<Developer> accumulator) {
                    Developer result = null;
                    for (Developer t : list) {
                        if (result == null) {
                            result = t;
                        } else {
                            result = accumulator.apply(result, t);
                        }
                    }

                    return result;
                }

            Integer result = math(Arrays.asList(numbers), 0, (a, b) -> a + b);
            public static <T> T math(List<T> list, T init, BinaryOperator<T> accumulator) {
                    T result = init;
                    for (T t : list) {
                        result = accumulator.apply(result, t);
                    }
                    return result;
                }

        UnaryOperator - the Function<Integer, Integer> which accepts and returns the same type, can be replaced with UnaryOperator<Integer>.
            List<Integer> result = math(list, x -> x * 2);
            public static <T> List<T> math(List<T> list, UnaryOperator<T> uo){
                    List<T> result = new ArrayList<>();
                    for (T t : list) {
                        result.add(uo.apply(t));
                    }
                    return result;
                }

         Supplier
            Employee emp1 = factory(() -> new Employee("mkyong"));
            public static Employee factory(Supplier<? extends Employee> s){
                    Employee employee = s.get();
                    if (employee.getName() == null || "".equals(employee.getName())) {
                        employee.setName("default");
                    }
                    employee.setSalary(BigDecimal.ONE);
                    employee.setStart(LocalDate.of(2017, 8, 8));

                    return employee;
                }